import dotenv from 'dotenv';
import { Bot, GrammyError, HttpError, InlineKeyboard } from "grammy";
import cron from 'node-cron';
import axios from 'axios';
import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';


const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

const timezones = JSON.parse(
    fs.readFileSync(path.join(__dirname, '../public/timezone.json'), 'utf8')
);

dotenv.config();

const bot = new Bot(process.env.BOT_API_KEY)
const webAppUrl = process.env.WEB_APP_URL;
const backendUrl = process.env.BACKEND_URL;


function convertToIANATimezone(tz) {
    if (tz.startsWith('UTC+')) {
        const offset = tz.replace('UTC+', '');
        return `Etc/GMT-${offset}`;
    }
    if (tz.startsWith('UTC-')) {
        const offset = tz.replace('UTC-', '');
        return `Etc/GMT+${offset}`;
    }
    return tz;
}

function getTimezoneByCity(cityName) {
    const city = timezones.find(c => c.value.toLowerCase() === cityName.toLowerCase());
    return city?.timezone || null;
}

async function scheduleDrugReminders(bot) {
    try {
        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        const [humanRes, petRes] = await Promise.all([
            axios.get(`${backendUrl}/public/drugs`),
            axios.get(`${backendUrl}/public/pet/drugs`)
        ]);

        const humanReminders = humanRes.data.map(r => ({ ...r, isPet: false }));
        const petReminders = petRes.data.map(r => ({ ...r, isPet: true }));
        const allReminders = [...humanReminders, ...petReminders];

        for (const reminder of allReminders) {
            const { telegram_id, name, catigories, intake, notification, day, time_day, isPet, city  } = reminder;
            if (!telegram_id || !Array.isArray(notification)) continue;

            for (const timeObj of notification) {
                const [hour, minute] = timeObj.value.split(":").map(Number);
                const rawTimezone = getTimezoneByCity(city)
                const timezone = convertToIANATimezone(rawTimezone);

                cron.schedule(`${minute} ${hour} * * *`, async () => {
                    try {
                        await bot.api.sendMessage(telegram_id,
                            `üíä <b>–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –ø—Ä–∏—ë–º–µ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞ –¥–ª—è ${isPet ? "–ø–∏—Ç–æ–º—Ü–∞" : "—á–µ–ª–æ–≤–µ–∫–∞"}:</b>\n\n` +
                            `<b>–ö–∞—Ç–µ–≥–æ—Ä–∏—è:</b> ${catigories}\n` +
                            `<b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> ${name}\n` +
                            `<b>–ö—É—Ä—Å:</b> ${day} –¥–Ω–µ–π, ${time_day} —Ä–∞–∑–∞ –≤ –¥–µ–Ω—å\n` +
                            `<b>–°–ø–æ—Å–æ–± –ø—Ä–∏—ë–º–∞:</b> ${intake}\n`,
                            {
                                parse_mode: 'HTML'
                            });
                    } catch (err) {
                        console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è ${telegram_id} –≤ ${timeObj.value}:`, err);
                    }
                }, {
                    timezone: timezone,
                });

                // console.log(`‚è∞ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ: ${telegram_id} ‚Äî ${name} –≤ ${timeObj.value}`);
            }
        }
    } catch (err) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ª–µ–∫–∞—Ä—Å—Ç–≤ –∏–ª–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏:", err);
    }
}

bot.command("start", async (ctx) => {
    const inlineKeyboard = new InlineKeyboard().webApp("Telegram Web App", webAppUrl)
    await ctx.reply("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!", {reply_markup: inlineKeyboard})
})

bot.api.setChatMenuButton({
    menu_button: {
        type: "web_app",
        text: "Open App",
        web_app: { url: webAppUrl }
    }
}).catch(console.error);


// 0 12 * * *

cron.schedule('0 12 * * *', async () => {
    try {
        const response = await axios.get(`${backendUrl}/public`);
        const users = response.data;

        for (const user of users) {
            const telegramId = user.telegram_id;

            if (!telegramId) continue;

            await bot.api.sendMessage(telegramId,
                'üîî <b>–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ</b>\n\n–ù–µ –∑–∞–±—É–¥—å—Ç–µ —Å–µ–≥–æ–¥–Ω—è –æ—Ç–º–µ—Ç–∏—Ç—å –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏, –æ–±–æ—à–ª–∏—Å—å –ª–∏ –≤—ã –±–µ–∑ –≤—Ä–µ–¥–Ω–æ–π –ø—Ä–∏–≤—ã—á–∫–∏. –≠—Ç–æ –≤–∞–∂–Ω–æ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –≤–∞—à–µ–≥–æ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ üí™', {
                    parse_mode: 'HTML',
                    reply_markup: {
                        inline_keyboard: [[
                            { text: '–ü–µ—Ä–µ–π—Ç–∏ –≤ Web App', web_app: { url: `${webAppUrl}/habits` } }
                        ]]
                    }
                });
            console.log(telegramId,"- –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –ø—Ä–∏–≤—ã—á–∫–æ–π");
        }
    } catch (err) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏–π:", err);
    }
});


bot.catch((err) => {
    const ctx = err.ctx
    console.error(`error while handling update ${ctx.update.update_id}`)
    const e = err.error
    if(e instanceof GrammyError) {
        console.error("error in request", e.description)
    } else if(e instanceof HttpError) {
        console.error("Could not contact Telegram", e)
    } else {
        console.error("unknown error", e)
    }
})

bot.start()
scheduleDrugReminders(bot)